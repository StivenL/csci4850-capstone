install_github('xgboost','tqchen',subdir='R-package')
require(devtools)
install_github('xgboost','tqchen',subdir='R-package')
install.packages('xgboost')
library(xgboost)
library(tidyverse)
install.packages("caret")
library(caret)
library(xgboost)
library(tidyverse)
source("~/csci4950-capstone/notebooks/xgb_test.R")
setwd("/Users/stivengl/csci4950-capstone")
df <- read_csv('data/processed/dept35_22.csv')
df <- read.csv('data/processed/dept35_22.csv')
set.seed(0)
part <- createDataPartition(df$Total.Units.Sold, p = .8, list = FALSE)
train <- df[parts, ]
train <- df[part, ]
test <- df[-part, ]
df[6]
train_x <- df.matrix(train[, -6])
library(caret)
library(xgboost)
library(tidyverse)
data <- read.csv('data/processed/dept35_22.csv')
set.seed(0)
part <- createDataPartition(data$Total.Units.Sold, p = .8, list = FALSE)
train <- data[part, ]
test <- data[-part, ]
train_x <- data.matrix(train[, -6])
train_y <- train[, 6]
test_x <- data.matrix(test[, -6])
test_y <- test[, 6]
xgb_train <- xgb.DMatrix(data = train_x, label = train_y)
xgb_test <- xgb.DMatrix(data = test_x, label = test_y)
watchlist <- list(train = xgb_train, test = xgb_test)
model <- xgb.train(data = xgb_train, max.depth = 3, watchlist = watchlist, nrounds = 100)
model <- xgb.train(data = xgb_train, max.depth = 3, watchlist = watchlist, nrounds = 200)
model <- xgb.train(data = xgb_train, max.depth = 3, watchlist = watchlist, nrounds = 300)
model <- xgb.train(data = xgb_train, max.depth = 2, watchlist = watchlist, nrounds = 100)
model <- xgb.train(data = xgb_train, max.depth = 4, watchlist = watchlist, nrounds = 100)
model <- xgb.train(data = xgb_train, max.depth = 4, watchlist = watchlist, nrounds = 250)
model <- xgb.train(data = xgb_train, max.depth = 3, watchlist = watchlist, nrounds = 500)
model <- xgb.train(data = xgb_train, max.depth = 5, watchlist = watchlist, nrounds = 100)
model <- xgb.train(data = xgb_train, max.depth = 5, watchlist = watchlist, nrounds = 200)
model <- xgb.train(data = xgb_train, max.depth = 7, watchlist = watchlist, nrounds = 100)
model <- xgb.train(data = xgb_train, max.depth = 7, watchlist = watchlist, nrounds = 200)
final.model <- xgboost(data = xgb_train, max.depth = 7, nrounds = 200, verbose = 0)
caret::RMSE(test_y, pred_y)
final.model$evaluation_log
pred_y <- predict(final.model, test_y)
ahhh <- xgb.DMatrix(test_y)
pred_y <- predict(final.model, test_x)
caret::RMSE(test_y, pred_y)
